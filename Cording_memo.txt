

コーディングについて

----------------------------------------------------

◎ガード

・ガードとは
処理の対象外となる条件を関数やループの先頭に集めてreturnやcontinue,breakで抜ける方法。

・メリット
ネストを減らし、正常系の処理がわかりやすくなる。

例：変数$a,$b,$cをチェックする関数
・悪い例
function check($a, $b, $c){
    if(is_null($a)){
        $result = 0;
    }else{
        if(is_null($b)){
            $result = 0;
        }else{
            if(is_null($c)){
                $result = 0;
            }else{
                $result = 1;
            }
        }
    }

    return $result;
}

正常系コードがネストの深い位置で無駄にわかりにくい

・良い例
function check($a, $b, $c){
    if(is_null($a)) return 0;
    if(is_null($b)) return 0;
    if(is_null($c)) return 0;

    return 1;
}

関数の先頭に異常系を集め即座にreturnすることで正常系と異常系が明確になる。

・for文のガード例
$result = PDOStatement::fetchAll();
foreach($result as $rows){
    if($rows['kind'] != 2) continue; //XXXの場合

    // 正常系の処理

}
・普通のfor文
$result = PDOStatement::fetchAll();
foreach($result as $row){
    if($row['kind] == 2){
        // 正常系の処理
    }
}

ガードを使うことでネストを減らすことができる。


◎コードリーディングのコツ

重要なことは
そのクラスの役割やパターン、インターフェイスの理解である。
コードの実装は極力見ずにインターフェイスと構造を理解する。
ダイヤグラムや関係のグラフを書いて理解する。


◎可読性

・可読性がなぜ必要なのか
プログラミングのほとんどの時間はコードを読む時間であり、
コードを読むのは人間であるため。

・可読性が低いと何が起こるか
1.読んで理解するまでに時間がかかる　⇒　余計な工数がかかる
2.バグが混入しやすい　
3.デバッグや改修に時間がかかる

・読みやすさとはなにか
基本定理「第三者がコードを読んで理解する時間を最短にすること」
読みやすいコードとは理解しやすいコードであり、理解するとは変更を加えたり、バグを見つけたりできること

・改善策
☆表面上の改善
1.適切な名前
2.優れたコメント
3.フォーマット
☆ループとロジックの単純化
1.制御フローを読みやすくする
2.ネストを浅く
3.早期return
☆コードの再構成
1.1度に1つのことを（単一責任の原則）
2.短いコードを書く（KISSの原則/YAGNIの原則）

☆表面上の改善について

1.適切な名前
　a.命名
　　明確で正確な単語を選ぶ
　　get/fetch/download　状況によって適切なものを選ぶ
　　汎用的な名前は避ける
　　例：
　　getSize()    // 何のサイズか不明
　　getHeight()　// 明確
　　
　　抽象的な名前よりも具体的な名前を使う（値の単位など）
　　delay    // 何の単位か不明瞭
　　delayMs  // 単位があり明確

　　重要な属性を追加する
　　password          // 重要な属性が抜けている
　　plaintextPassword // 属性が明確
　　comment           // 重要な属性が抜けている
　　unescapedComment  // 属性が明確

　b.誤解されない名前
　　filter　は条件にあったものを「選択(select)」なのか「除外(exclude)」なのか不明確

　　限界値はmin / maxを使う
　　　未満なのか以下なのか

　　boolean　はis/has/can/shouldを使う
　　　true と false　の意味を明確にする

　c.美しさ
　　優れたコードは目に優しく、見た目が美しいコードの方が使いやすい
　　美しさと優れた設計は関連しており、リファクタリング（実装を変えずにコードを整理すること）がうまくいくようになる

　　3つの原則
　　読み手が慣れているパターンと一貫性のあるレイアウトを使う
　　似ているコードは似ているように見せる
　　関連するコードをまとめてブロックにする

2.コメント
　a.コメントの目的
　　書き手の意図を読み手に知らせる
　　コードを書く本人は頭の中に大切な情報があるが、読み手はその情報が失われてしまう
　b.コメントすべきでないこと
　　価値のないコメント
　　⇒　コードからすぐにわかること　（例：getHeight)()  // 高さの取得）
　　　　コード以外の新しい情報
　　　　背景や経緯
　　　　コメントのためのコメント
　　　　コードがおかしい可能性、ひどいコードにはコメントではなく名前を変えるべき
　　　　コード自体が読みやすいことが前提
　c.自分の考えを記録する
　　優れたコメントとは「考えを記録する」ためのもの
　　コードは絶えず進化しているため、その過程での欠陥を文章化すべき
　　TODOやFIXMEなどのアノテーション（特定のデータに対して情報タグ（メタデータ）を付加する⇒注釈のこと）を活用
　　基本その場で改善できるところは改善する（ボーイスカウトの原則）
　　定数には背景となるコメントを残す
　d.読み手の立場になって考える
　　質問されそうなことを想像する
　　関数の内部にロジック分けしたブロック毎へ要約したコメントをする
　e.コメントは正確で簡潔に
　　これそれＮＧ
　　短く単純で直感的な言い回し






3.フォーマット

◎単一責任の原則

◎KISSの原則

◎YAGNIの原則


◎ボーイスカウトの原則

