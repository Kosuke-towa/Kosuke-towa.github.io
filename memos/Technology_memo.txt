

主にITテクノロジーについて

つまり全般

------------------------------------------------------------------

◎HTTP

◎Cookie　　https://qiita.com/7968/items/ce03feb17c8eaa6e4672

ステートレス　：　状態が無いこと。HTTPの通信は1往復で切断されるため、前の状態を覚えていない。ステートレスな通信というのは前の状態を記録していない通信ということ。

状態を保持する（ステートフル）にするために、サーバーがクライアントに対して識別できる一意の値を渡し、
クライアントがリクエストする時にその値を教えることでサーバー側で識別をすることができ、それぞれの状態を覚えることができる。
この仕組みをCookieと呼ぶ。

そもそもCookieとは、HTTP Cookieという正式名称のものでクライアントに保存された情報のこと。
サーバーからのレスポンスメッセージに「Cookieを保存してください」という指示があれば、クライアントは指示に従いCookieを保存する。
クライアントにCookieが保存されている場合、クライアントは常にリクエストメッセージに「こんなCookieがあります」とサーバーに教える仕組みになっている。

・Cookieを保存する指示
　⇒　サーバーがレスポンスメッセージにSet-Cookieヘッダを付与することで可能。
　　　Set-CookieヘッダにはCookieの有効期限、Cookieを送るドメイン、有効パスなどの各属性があり、；で区切って記述することで設定できる。
構文
Set-Cookie: 名前=値;[expires=有効期間(日時)];[Path=URL相対パス];[Domain=ドメイン名];[secure];[httponly]
// Code
 Set-Cookie: a=b; expires=Mon, 15-Aug-2016 12:00:00 GMT; path=/; domain=xxxx.com; secure; httponly
// end 

・Cookieを教える
　⇒　リクエストメッセージにCookieヘッダを付与することで可能。
構文
Cookie: 名前 ＝ 値
// Code
 Cookie: a = b
// end


・歴史
Cookieは1994年Netscape Communicationsというアメリカの会社に考案・実装された。
Netscapeは1994年にNetscape Navigatorというブラウザをリリースしたが、2008年にサポートを終了。
NetscapeはCookieの他に、Javascript、RDF/RSS、SSLといったWeb技術を生み出した。

・Cookieの仕様の変遷
・1994年　Netscape　レスポンスメッセージ　Set-Cookie（Name,Expires,Domain,Path,Secure）　リクエストメッセージ　Cookie
・1997年　RFC2109　レスポンスメッセージ属性Max-Age,Comment,Version追加
・2000年　RFC2965　レスポンスメッセージ　Set-Cookie2　属性CommentURL,Port追加　リクエストメッセージ　Cookie2
・2011年　RFC6265　レスポンスメッセージ　Set-Cookie　属性Max-Age,HttpOnly以外削除　リクエストメッセージ　Cookie

・Cookieの数とサイズの上限
1Cookieあたり　4096バイト
1ドメインあたり　50個のCookie
ブラウザ全体で3000個のCookie
※　実際は各ブラウザで異なる

Cookieには変更されて困るような情報は扱わない。（Cookieはリクエストメッセージとして送られてくるため、偽装が可能）

・Cookieの確認
chrome://settings/content/cookies　プライバシーとセキュリティ

・PHPでSet-Cookieヘッダを定義

setcookie(Cookie名, Cookie値, 有効日時, パス, ドメイン, HTTPS接続のみ, Javascript無効)
// Code
 setcookie('a', 'b', time()+60*60, '/', 'xxxxx.com', true, true）
// Cookieを削除する場合は、有効日時以外を同じ値にして、time()-1を設定する。
 setcookie('a', 'b', time()-1, '/', 'xxxxx.com', true, true）
// end

・PHPでCookieを取得
Cookieはスーパーグローバル変数$_COOKIEに連想配列として格納されている。
取得する場合は
// Code
 $name = $_COOKIE["name"];
// end 

他人のCookieを盗んだ場合は「不正アクセス禁止法」で逮捕される。

◎Session

Sessionとは一連の処理の始まりから終わりまでを表す概念。
Cookieを使ってSessionの管理を行う。

・PHPでSessionを管理する

session_start();
Sessionを管理するにはCookieに一意の値を入れてリクエストしてもらうことで一連の処理として扱う必要がある。
この一意の値の役割をするのがSessionIDである。
このSessionIDを発行するのがこの関数の役割である。
SessionIDが発行されるたびにSessionファイルがサーバーに作られる。
このSessionファイルには任意の値を含むことが可能。

リクエストメッセージにSessionIDがあるかないかで挙動が変わる。
➡リクエストメッセージに無い場合
・SessionIDが無ければIDを発行し、IDをCookieに保存するようにレスポンスメッセージを送信
・SessionIDを発行する時にサーバー側ではIDごとのSessionファイルを作成
➡リクエストメッセージにある場合
・IDがあれば、該当するSessionファイルにある情報を参照

セッションを管理するページではsession_start()をHTMLタグより先に必ず記述する必要がある。

// Code
<?php 
session_start()
?>
<html>
<!DOCTYPE html>

以下略
// end


・Cookieによるセッション管理
リクエストメッセージを受けた際にサーバーはSessionをスタートしてIDを発行する
レスポンスメッセージにIDを付与してCookieに保存するよう指示
クライアントはCookieにIDを保存して2回目以降常に送信
クライアントはリクエストの際にSession情報のnameというキーに○○という値を保存するように指示
サーバーは該当のSessionファイルにリクエストされた情報を保存
こうすることでセッション管理を行っている。

・SessionID

個人を識別するために使われる重要な値である。
単純な値や推測できる値では個人を識別する値として不適切である。
PHPの場合は、「MD5」という方法で自動的に複雑な値を作成する。
この方法の種類合は、php.iniもしくはini_set関数を使ってsession.hash_functionを設定することで変更できる。
決済などを行うWebアプリケーションでは種類を変更する必要がある。

・Sessionファイルの保存先

通常のSessionファイルの保存先はC:\WINDOWS\temp。
保存先はphpinfo()を記述したPHPファイルを実行することで確認できる。
session.save_pathの項目に記載されている。
sess_xxxxxxxxxxxxxxxxxxxxxxxという名前でSessionファイルが作成される。

・共有サーバーを利用している場合

tempフォルダに保存されるのが一般的。
PHPの場合はsession_save_path関数を使うことで保存先を変更できる。

・PHPでSessionの情報を保存・取得する

Session情報はスーパーグローバル変数の$_SESSIONに連想配列として格納される。

・Session情報の保存
// Code
$_SESSION["name"] = "サトウ";
// end

・Session情報の取得
// Code
$name = $_SESSION["name"];
echo $name;
// end

・Sessionファイルの有効期限の変更

Sessionファイルの有効期限を変更する場合は
php.ini、もしくはini_set関数を使い、session.gc_maxlifetimeを変更する。
phpinfo()を実行することでsession.gc_maxlifetimeの初期値を確認できる。

ini_set関数を使う場合はsession_start()よりも前に
ini_set('session.gc_maxlifetime', 60 * 60 * 24);
と記述することで1日に変更できる。

削除されるのは最終アクセスから数えてになる。
また、有効期限が過ぎたSessionファイルの削除は削除可能な状態で待機して一定の確率でまとめて削除される。
確率は　session.gc_divisor の値を分母、　session.gc_probability の値を分子とする。
初期では　session.gc_divisor 1000  session.gc_probability 1　となっており、
1000回に1回の確率ということになる。
これらの値もphp.iniもしくはini_set関数で変更できる。

・PHPでSessionファイルを破棄する

Session情報の削除はunset()関数で行う。
// Code
unset($_SESSION['name']);
// end

Sessionファイルを破棄する場合は
// Code
$_SESSION = array();
setcookie(session_name(), '', time()-1, '/');
session_destroy();
// end

$_SESSIONにarray()を代入することで空にする。
session_destroy()でSessionファイルを削除する。
Sessionファイルを削除してもクライアントにあるCookieにはSessionIDが残っている。
Cookieも削除する場合は、先述のsetcookie()にtime()-1を指定する。

session_name()はSession名を取得する関数で、
session_start()で自動作成されたSessionID（初期値はPHPSESSID）を取得することができる。

・Sessionの脆弱性

セッションハイジャック
セッションフィクセーション
クロスサイトリクエストフォージェリ


◎スーパーグローバル変数の生成　　https://qiita.com/mpyw/items/7852213f478e8c5a2802

リクエストが来た時、それに応じた$_GET,$_POST,$_COOKIEが生成される様子を考える。

・連想配列のパラメータを文字列で表現
// Code
$data = [
    'A' => 'B',
    'C' => [
        'D' => 'E'
    ],
];
//  end

上記を文字列で表現する時、2種類の形式がある。
・クエリ－ストリング
 A = B & C[D] = E
・Cookieヘッダー
 Cookie: A = B ; C[D] = E

PHPはこれらの文字列を解析し、元の配列に復元する仕事をしている。

・PHPがWebブラウザからパラメータを受け取る方法（基本編）

前提として
1．ヘッダーの１行１行を区切るために使用するのはCRLF'\r\n'
2．ヘッダーの生成と送信はWebブラウザで全自動でするため、普段我々がWebブラウザを使う限り意識することはない

・URLにクエリーストリングを含める
クエリーストリングはURLの?より後ろに記述される。
// Code 送信側
// リンクをクリックするとリクエストが実行される
<a href="http://example.com/test.php?a=b"> Test </a>
// フォームを送信するとリクエストが実行される
<form method ="get" action="http://example.com/test.php">
<input type="hidden" name="a" value="b">
<input type="submit" value="送信">
</form>
// リクエストヘッダー
GET /test.php?a=b HTTP/1.1
Host: example.com
Connection: Close
//  end

クエリーストリングは$_SERVER['QUERY_STRING']に格納される。

// Code 受信側
// 文字列としてこのようにセットされる、もしくは未定義
$_SERVER['QUERY_STRING'] = 'a=b';
// これらのうち、いずれかの記述で取得する
$query_string = isset($_SERVER['QUERY_STRING']) ? $_SERVER['QUERY_STRING'] : ''; // issetでチェック
$query_string = $_SERVER['QUERY_STRING'] ?? '';                                  // ??演算子でチェック（PHP7.0以降）
$query_string = (string)filter_input(INPUT_SERVER, 'QUERY_STRING');              // filter_input関数経由で取得
// これをパースして配列に格納したものが$_GETで、この変数は常に存在している
$_GET = ['a' => 'b'];

・ポストフィールドにクエリーストリングを含める

クエリーストリングはヘッダー群の一番下に空行を1つ挟んで配置され、そこをポストフィールドと呼び、以下のヘッダー群を必ず伴う。
Content-Length: クエリーストリングのバイト数を表す
Content-type  : application/x-www-form-urlencoded 固定

// Code 送信側
// フォームを送信するとリクエストが実行される
<form method="post" action="http://example.com/test.php">
<input type="hidden" name="a" value="b">
<input type="submit" value="送信">
</form>
// リクエストヘッダー
POST /test.php HTTP/1.1
Host: example.com
Content-Length: 3
Content-Type  : application/x-www-form-urlencodede
Connection    : Close
a=b
//  end

// Code 受信側
// クエリーストリング部分が文字列で欲しい場合は、php://inputをファイルのように取得する
$postfields = file_get_contents('php://input');
// これをパースして配列に格納したものが$_POSTでこの変数は常に存在する。
$_POST = ['a' => 'b'];
//  end

・Cookieヘッダーを送信する

Cookieを保存させる
setcookie関数、またはsetrawcookie関数を使うと、ブラウザに対して簡単に整形されたSet-Cookieヘッダーを送信できる。
setcookie関数は値のみパーセントエンコードし、setrawcookie関数はキー・値ともそのままセットする。
// Code 
// PHPでこれを実行
setcookie('a', 'b');
// Webブラウザに送信されるSet_Cookieヘッダー（基本形であって実際はこれの後に色々追加される）
Set-Cookie: a=b
//  end

これをブラウザが受理すると次回から同一サイトに対してCookieヘッダーを送信するようになる。
この関数を実行したタイミングではCookieヘッダーは送信されてきていないことに注意する。

以下のパラメータを設定することでCookieの挙動を詳細に制御できる。

・$expire
有効期限。タイムスタンプとして表される。
1．省略または0を指定するとWebブラウザを閉じるまでが有効期限となる。
2．0より大きく現在より小さい値（過去）を指定すると、即座にWebブラウザで削除が行われる。
　ただし、共通の$path,$domainを指定する必要がある。
// Code
setcookie('foo', '', time() - 3600);
// もしくは
setcookie('foo', '', 1);
//  end

・$path
どこの階層から送信を行うかを表す。省略した場合はスクリプトが存在しているディレクトリを指定したと見なされる。

・$domain
対象となるドメイン名。省略した場合はスクリプトが存在するサーバーそのものがそのまま使われる。

・$secure
HTTPS接続のみに限定するかどうか。デフォルト値はfalse。

・$httponly
JavaScriptからのアクセスをブロックするかどうか。デフォルト値はfalse。

// Code 
// 実行例PHPコード
setcookie('a', 'b', 992174400, '/foo/bar', 'example.com', false, true);
// 実行結果Set-Cookieヘッダー
Set-Cookie: a=b; expires=Sun, 10-Jun-2001 12:00:00 GMT; path=/foo/bar; domain=exaple.com; httponly
//  end

Cookieを受信する
文字列のままのCookieは頭のCookie:をのぞいて$_SERVER['HTTP_COOKIE']に格納される。
Cookieヘッダーが無い場合、このインデックスは存在せず、使用する場合は$_SERVER['QUERY_STRING']同様チェックが必要。
// Code
// 文字列としてこのようにセットされる、もしくは未定義
$_SERVER['HTTP_COOKIE'] = 'a=b';
// これらのうち、いずれかの記述で取得する
$cookie = isset($_SERVER['HTTP_COOKIE']) ? $_SERVER['HTTP_COOKIE'] : '';
$cookie = $_SERVER['HTTP_COOKIE'] ?? '';
$cookie = (string)filter_input(INPUT_SERVER, 'HTTP_COOKIE');
// これをパースして配列に格納したものが$_COOKIEで、この変数は常に存在している
$_COOKIE = ['a' => 'b'];
//  end

・PHPがWebブラウザからパラメータを受け取る方法（応用編）

URLにパス情報を含める
ファイルをディレクトリのように見せ、その後ろに追加で情報を階層的に記述することが可能。

// Code 送信側
// リンクをクリックするとリクエストが実行される
<a href="http://example.com/test.php/foo/bar">Test</a>
// リクエストヘッダー
GET /test.php/foo/bar HTTP/1.1
Host      : example.com
Connection: Close
//  end

パス情報は$_SERVER['PATH_INFO']に格納される。
// Code 受信側
// 文字列としてこのようにセットされる、もしくは未定義
$_SERVER['PATH_INFO'] = '/foo/bar';
//  end

この部分が無い場合、このインデックスは存在しない。
使用する場合は$_SERVER['QUERY_STRING']と同様のチェックが必要。

・ポストフィールドにマルチパートコンテンツを含める

パラメータがパーセントエンコードされないのが特徴で、そのため、通信量が肥大化しやすいファイルのアップロードに利用される。

送信側
マルチパートコンテンツはヘッダー群の一番下に空行を1つ挟んで配置され、以下のヘッダーを必ず伴う。
Content-Length: マルチパートコンテンツの総バイト数を表す
Content-Type  : multipart/form-data; boundary=境界文字列 という形式。
　　　　　　　　 改行などを除く任意の文字列を設定できるが、送信するデータと衝突する可能性の無いランダムなハッシュ値を採用することが多い。

各コンテンツ形式
// Code 通常のパラメータ
‐‐境界文字列
Content-Disposition: form-data; name="NAME属性値"
送信するVALUE属性値
‐‐境界文字列
Content-Disposition: form-data; name="NAME属性値"; filename="ファイル名"
Content-Type       : MIMEタイプ（ブラウザが自動判定）
送信するファイルデータ
　｜
　｜　// これらが連続で配置され、最後のパラメータの後には次の1行が必ず挿入される
　｜
‐‐境界文字列‐‐　// ←これ
//  end

リクエストの例
// Code
// フォームを送信するとリクエストが実行される
<form method="post" action="http://example.com/test.php" enctype="multipart/form-data">
<input type="hidden" name="hidden" value="あいうえお">
<input type="file" name="file">
<input type="submit" value="送信">
</form>
// リクエストヘッダー
POST /test.php HTTP/1.1
Host; example.com
Content-Length: 257
Content-Type  : multipart/form-data; boundary=----hogehoge
Connection    : Close

-------hogehoge
Content-Disposition: form-data; name="hidden"

あいうえお
-------hogehoge
Content-Disposition: form-data; name="file"; filename="sample.txt"
Content-Type       : text/plain

サンプルファイルデータ
-------hogehoge--
//  end

受信側

ファイルに関するものは$_FILES、それ以外のものは$_POSTに格納される。

・使わない方がいいができること
1．$_GET,$_POSTに同時に格納させる
method属性がpostの時、action属性の値を?に続いてクエリを付加することで実現できる。
// Code 
// フォームを送信するとリクエストが実行される
<form method="post" action="http://example.com/test.php?a=b">
<input type="hidden" name="c" value="d">
<input type="submit" value="送信">
</form>
// 配列としてこのようにセットされる
$_GET = ['a' => 'b'];
$_POST = ['c' => 'd'];
// end

2．$_GET,$_POST,$_COOKIEをまとめて扱う
$_GET ➡　$_POST ➡　$_COOKIEの順に上書き代入を行い、生成されるスーパーグローバル変数が$_REQUESTでこの変数は常に存在する。

・PHPから他のスクリプトにリクエストを送信する方法
ここまでに紹介した方法は全てWebブラウザから送信されてきた情報を自身のスクリプトで処理する方法だった。
これと異なり、自身のスクリプトから他のスクリプトに情報を送信することも可能。PHPスクリプトにWebブラウザの代役をさせると考えればわかりやすい。
よく使われる関数は
file_get_contents　https://www.php.net/manual/ja/function.file-get-contents.php
Client URL Library　https://www.php.net/manual/ja/book.curl.php


◎Session

・Sessionとは

スーパーグローバル変数$_GET,$_POST,$_COOKIE,$_REQUESTは情報をユーザー側に送信させるもので、
たとえ$_GETや$_POST用のパラメータがHTMLの中に埋め込まれていても、一目にはユーザーに存在を感じさせない$_COOKIEであったとしても
閲覧なんて当たり前、更には改竄しようとおもえばいくらでもできることを示している。
// Code
// 例えばブラウザゲームで自分の所持金をCookieで管理していたら、文字列になるはずのところに配列をセットしてプログラムを誤作動させる
$_COOKIE["money"] = [];
$_COOKIE["money"] = '99999999';
//  end
こういったことができてしまう。

そこでブラウザ側ではなくサーバー側に情報を保存するというスタンスで生まれたのがSessionである。

・基本的な使い方

session_start関数で$_SESSION変数を準備し、あとは値の取得・代入といった操作を実行する。

// Code
<?php 

// セッションを開始
@session_start();　// @は不正なリクエストが来るとE_NOTICE、更にはE_WARNINGレベルのエラーが発生し得るため。

if(!isset($_SESSION['count'])){
    // 初回にはcountを0に初期化
    $_SESSION['count'] = 0;
}
// インクリメント
++$_SESSION['count'];

header('Content-Type: text/html; charset=utf-8');

?>
<!DOCTYPE html>
<html>
<head>
    <title>あなた専用カウンター</title>
</head>
<body>
    <p>
        こんにちは、あなたがこのページに来たのは<?=$_SESSION['count']?>回目ですね。<br>
        F5で更新すると再読み込みします。
    </p>
</body>
</html>
// end

・スーパーグローバル変数への代入はタブーなのか

変数の存在をチェックして初期化する
// Code
$data = isset($_POST['data']) ? $_POST['data'] : ''; // 三項演算子を用いる例
  or
$data = (string)filter_input(INPUT_POST, 'data');    // filter_input関数を活用して型チェックまで行う例

// よくない上書き代入
if(!isset($_POST['data'])){
    $_POST['data'] = '';
}
// end

$_SESSIONだけは例外的に直接操作が広く認められている唯一のスーパーグローバル変数である。

・セッションに格納できるキー

10進整数と等価でない文字列であればなんでも格納できる。

// Goode Code
$_SESSION['nine']  // 通常の文字列
$_SESSION['010']   // 8進表記文字列

// Bad Code
$_SESSION[8]   // 10進表記整数
$_SESSION[010] // 8進表記整数
$_SESSION['8'] // 10進表記文字列
$_SESSION['0'] // 10進表記文字列
// end

・セッションに格納できる値

$_GET,$_POST,$_COOKIE,$_REQUEST　➡　文字列と配列しか扱えない
$_SESSION　➡　リソース型以外の任意のデータを保存できる。ただし、オブジェクトを保存する場合、そのクラスの定義がsession_start関数よりも前に行われる必要がある。

// Good Code
require 'Test.class.php';
session_start();

// Bad Code
session_start();
require 'Test.class.php';
// end

・Cookieとどう違う

1．セッションの方が保存できるデータ型が多い
2．セッションはサーバー側に保存されるのでユーザーに干渉を受けない

だが、そもそもセッションはCookieのもとに成り立っており、サーバー側に保存したデータを誰のものか判別するのがCookieで
デフォルトでは'PHPSESSID'という名前のCookieが判定に使われている。

上記の処理の流れ
1．ユーザーが初めてページにアクセスする。
2．session_start関数が初めてコールされ、
　 Set-Cookie: PHPSESSID=d41d8cd98f000v284e98990098ecd88712e; path=/
   のような他と重複しないランダムな値が自動生成されてユーザー側に送られる。
3．スクリプト内で$_SESSIONに（必要があれば）代入などを行う。
4．スクリプト終了時、セッションファイル sess_d41d8cd98f000v284e98990098ecd88712eに$_SESSIONの内容が復元可能な形で自動的に書き込まれる。

1．ユーザーが2回目にページにアクセスしてくる。
2．session_start関数がコールされると、まず最初に$_COOKIE['PHPSESSID']が存在しているのかチェックが行われる。
　 それを元に該当する名前のセッションファイルが存在しているかどうかを調べる。
3．存在している場合に限り、セッションファイル sess_d41d8cd98f000v284e98990098ecd88712eからデータが復元され、$_SESSIONが準備される。
4．スクリプト内で$_SESSIONに（必要があれば）代入などを行う。
5．スクリプト終了時、セッションファイル sess_d41d8cd98f000v284e98990098ecd88712eに$_SESSIONの内容が復元可能な形で自動的に書き込まれる。

・セッションファイルの名前と保存場所

セッションを識別するための3つの概念
1．セッションファイルの保存パス
2．セッション用Cookieの名前
3．セッション用Cookieの値


これらは以下のいずれかの方法で設定または取得できる
・php.iniの編集
・ini_set関数、またはini_get関数
・session_start関数の第1引数（PHP7.0以降のみで使えるオプション）
・専用の関数

1．セッションファイルの保存パス

 ・取得は常に可能
 ・設定はsession_start関数のコール前
 ・デフォルト値は空で、その場合sys_get_temp_dir関数の返り値であるシステム既定のテンポラリディレクトリが使われる。

// Code
// 取得
$path = session_save_path();
 or
$path = ini_get('session.save_path');

// 設定
session_save_path('/tmp');
 or
ini_set('session.save_path', '/tmp');
 or
session_start(['save_path' => '/tmp']);
// end


2．セッション用Cookieの名前

 ・取得は常に可能
 ・設定はsession_start関数のコール前
 ・デフォルト値があらかじめ'PHPSESSID'として設定

// Code
// 取得
$name = session_name();
 or
$name = ini_get('session.name');

// 設定
session_name('MYSESSID');
 or
ini_get('session.name', 'MYSESSID');
 or
session_start(['name' => 'MYSESSID']); //PHP7.0以降
// end

3．セッション用Cookieの値

 ・取得はsession_start関数をコールした後。コール前は空文字が返される
 ・設定はsession_start関数のコール前
 ・設定を行えば、session_startコール時に強制的にそれをセッションIDとして利用できる
 ・設定を行わなければ、session_startコール時に$_COOKIE[session_name()]の値が利用される
 
// Code
// 取得
$id = session_id();

// 設定
session_id('vmtflhhks040679m9rq6044ps0');
// end

セッションファイルが保存されいてるパスは以下のように表現できる
// Code
$path = session_save_path() . '/sess_' . $_COOKIE[session_name()];
 or
$path = session_save_path() . '/sess_' . session_id();  // session_start関数のコール後のみ

・他のユーザーとの競合

$_SESSIONはセッションID毎に用意されるため、競合の心配はないが次のようにしていると可能性がある
・悪意のあるユーザーが何らかの手段を使い、他のユーザーのセッションIDを盗み、Cookie: PHPSESSID＝セッションID　として送信
・スクリプト内でsession_id関数を使ってセッションIDを固定している

・多重実行で自分自身と競合

セッションファイルはsession_start実行からスクリプト終了時まで排他ロックされるため、競合の心配はない。

・同一サーバー内にある他サイトのセッションと競合

セッション用Cookieのデフォルトの$pathは'/'となっている。
shopping.example.com　と　search.example.com　のようにサブドメインでわけてあれば問題は無い。
しかし、example.com/shopping　と　example.com/search　のようにパスで分けている場合には衝突が起こる。

これを解決するためにCookieが利用するパスを変える必要がある。

// Code
ini_set('session.cookie_path', '/foo/bar/baz');
// end

・有効期限

有効期限といっても、
・サーバー側のセッションファイルの有効期限
・ユーザー側のクッキーファイルの有効期限
が存在する。

・サーバー側のセッションファイルの有効期限

 ・有効期限は最終アクセスから24分間となる
 ・有効期限の過ぎたセッションファイルを毎回の実行ごとに検索して削除させると負荷がかかるため、
 　デフォルトでは1/100の確率でこの処理を行う。
 ・有効期限の過ぎたセッションファイルにアクセスがあった場合、有効期限が再度延長される。
 　つまり、有効期限切れのセッションファイルはその時点で無意味になるのではなく、単にいつ削除されても構わない状態。
 ※　なお、この有効期限によるセッションファイルの削除は、サーバーごとに行われる。
 　　つまり、共用サーバーでは他のサイトの影響を受ける可能性があるため、この問題を解決するために
 　　有効期限の変更、session_save_path関数、またはini_set関数で自分専用のディレクトリを設ける必要がある。

個々の情報は次のように設定できる。

// Code session_start関数よりも前
ini_set('session.gc_maxlifetime', 60 * 60 * 24 * 7 );
 or
session_start(['gc_maxlifetime' => 60 * 60 * 24 * 7]);
// end

・ユーザー側のクッキーファイルの有効期限

 ・デフォルトでは0（ブラウザを閉じるまで）
 ・それ以外の場合、有効期限は最初のアクセスから指定した期間までとなる

// Code session_start関数よりも前
ini_set('session.cookie_lifetime', 60 * 60 * 24 * 7);
 or
session_start(['cookie_lifetime' => 60 * 60 * 24 * 7]); //PHP7.0以降
// end

lifetime と $expire　の違い

lifetime ➡　セッションクッキーの有効期限。秒数で定義
expire　 ➡　クッキーの有効期限。Unixタイムスタンプのため、エポックからの経過秒数となる。
　　　　　　　time()　または mktime()関数により返された現在のUNIX標準時に期限としたい必要な秒数を加算する。
　　　　　　　time() + 60*60*24*30 はクッキーの有効期限を30日後にセットする。

・どのように2つの有効期限が関連するのか

　Case1.サーバー側にセッションファイルが残っているのにセッション用のCookieが消滅
　　　　サーバー側のセッションファイルが24分間の期限と1/100の確率の削除を待つのみ

　Case2.セッション用のCookieが送信されているのに、サーバー側のセッションファイルが既に削除
　　　　送信されてきたセッションIDを元にセッションファイルが再生成される。また、元から無効であった場合にもセッションファイルの生成が行われる。
　　　　後者は特にセッションアダプションと呼ばれ、場合によっては脆弱性の扱いになる。

　　　　この挙動を変更するのがphp.iniのsession.use_strict_modeディレクティブである。
　　　　デフォルトでは無効だが、有効にすることで無効なセッションIDであると判明した場合にセッションIDの再生成が行われ、ユーザーに向けてSet-Cookieヘッダーが新たに送信される。
　　　　ただし、このディレクティブにはほとんどセキュリティ対策の意味はない。

　　　// Code
     // アダプション検知を付加したsession_start関数（ついでにsession_start関数が吐きうるエラーに＠演算子無しで対策）
     function safe_session_start($name = null){
         if($name !== null){
             session_name($name);
         }
         $name = session_name();
         if(
             isset($_COOKIE[$name]) and
             !ctype_alnum($_COOKIE[$name]) ||
             !is_file(session_save_path() . '/sess_' . $_COOKIE[$name])
         ){
             unset($_COOKIE[$name]);
         }
         return session_start();
     }

・有効期限を長くするには

// Code 有効期限を1週間にする例
ini_set('session.gc_maxlifetime', 60 * 60 * 24 * 7);
ini_set('session.cookie_lifetime', 60 * 60 * 24 * 7);
session_start();
 or
//PHP7.0以降
session_start([
    'gc_maxlifetime' => 60 * 60 * 24 * 7,
    'cookie_lifetime' => 60 * 60 * 24 * 7
]);
// end

・Cookie以外のセッションIDを受け取る手段

ここで登場するphp.iniのディレクティブのうち、session.*のものは全てini_set関数で変更可能
優先順位の高い順

1．$_COOKIE
 ・session.use_cookieが有効な場合のみ採用される。デフォルトでは有効。
 ・ユーザー側にSet-Cookieヘッダーが自動的に送信されるようになる。

2．$_GET
　・session.use_only_cookiesが無効な場合のみ採用される。デフォルトでは有効。
　・以下の条件をすべて満たしたとき、HTML中に存在するURLに対してクエリが自動で付加される。
　　1.session.use_trans_sidが有効
　　2.出力バッファリングを行っていなければならない。　➡　ob_get_level関数の返り値が1以上でなければならない。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　output_bufferingが無効な場合は最初にob_start関数をコールする必要がある。
　　3.相対URLでなければならない。　➡　外部サイトに送信してしまうリスクがあるため、絶対URLには付加されない。
　・手動で付加する場合には定数SIDを使用する。'PHPSESSID=xxxxx'のような値が自動的に設定されている。

・「セッション固定攻撃」

　・攻撃対象
　　ログインする前からsession_start関数によりセッションが開始されているサイトが対象。
　　// Code ログイン前からセッションを開始してログイン状態のチェックを行っている例
    session_start();
    if(isset($_SESSION['logined'])){
        ‥‥
    }
    // end

　・攻撃を受けるケース
　　a．Cookie以外からのセッションIDを受け入れる場合
　　　1．攻撃者のあなたはログインフォームにアクセスして、発行された自分用のセッションID'PHPSESSID=xxxx'を入手
　　　2．http://example.com/login.php?PHPSESSID=xxxx　というURLをメールやTwitterなどの手段を使ってターゲットに踏ませる。
　　　　 この段階であなたとターゲットのセッションIDが共通なものになる。　➡　サーバー側から見ればあなたのWebブラウザとターゲットのWebブラウザが同じだと見なされる。
　　　3．ターゲットがログイン状態になれば、あなたもターゲットのアカウントでログイン状態になる。　➡　攻撃成功

　　b．Cookie以外からのセッションIDを拒否しているが、XSS脆弱性がある場合
　　　1．攻撃者はまずログインしてセッションIDを設定する。
　　　2．XSS脆弱性のあるサイトにターゲットを誘導して不正なJavaScriptを実行する。
　　　　 このJavaScriptで攻撃者のセッションIDをログインしたいサイトでも有効になるようにセットする。➡　ターゲットのセッションIDを攻撃者と同じものにする。
　　　3．ターゲットがリンクからログインしたいサイトに飛び、正規のログインを行う。
　　　4．攻撃者とターゲットのセッションIDが同じなので攻撃者もターゲットのアカウントでログイン状態になる。➡セッションハイジャック成功。

　・対策

  session_regenerate_id関数はセッションIDを新規生成したものに乗り換える関数。
  この関数は非常に重要である。
  動作
  1．セッションファイルを新しい名前にしてコピーする
  2．古いセッションファイルを削除する
  3．ユーザーに新たにSet-Cookieヘッダーを送信　

  ➡　ログインしたタイミングで新しいセッションに乗り換えることで誰かに目を付けられていてもそこで振り切ることができる。
  ※　なお、この関数をすべてのページに使うと、サーバーに大きな負荷を与え、セッションの引継ぎもうまくいかないため、ログイン直後に限定する。

  // Code
  session_regenerate_id(true);
  // end

　・セッションを破棄する

　特定の値のみを削除する
  // Code
　unset($_SESSION['key']);
　// end

　以下、セッション変数全体を空にする操作
  a．$_SESSIONに空配列を代入
  　・現在のスクリプト実行が終了するまでの間はディスク上に存在しているセッションファイルに書き込まれた情報はリセットされない。
  　・ユーザー側のセッション用のCookieには何の影響も与えない。
　
　// Code
  $_SESSION = [];
　// end

　b．session_destroy関数をコール
　　・現在のスクリプト実行が終了するまでの間はメモリー上に存在している$_SESSIONが保持している情報はリセットされない。
　　・ユーザー側のセッション用のCookieには何の影響も与えない。

　// Code
  session_destroy();
  // end

  c．有効期限を過去にしてsetcoolie関数をコール
  　・ユーザー側のセッション用のCookieを破棄する。
  　・メモリー上に存在している$_SESSIONが保持している情報には何の影響も与えない。
  　・ディスク上に存在しているセッションファイルに書き込まれている情報には何の影響も与えない。

  // Code
  setcookie(session_name(), '', 1, '/');
  // end

　それぞれの役割がありすべてを行えば万全だが、必ずしもすべて行う必要はない。

　aだけを行った場合
　・ディスク領域的には問題ないが、0バイトのセッションファイルが残る。
　・甲さんがログアウト直後に乙さんが同じWebブラウザからログインした場合、甲さんが使っていたセッションファイルに乙さんの情報が上書きされる。
　　➡　甲さんがセッションIDを控えていた場合、乙さんになりすますことができる。　➡　ただし、ログイン直後にsession_regenerate_id関数をコールしていれば安全。

　bだけを行った場合
　・スクリプト終了までに再度$_SESSIONにアクセスするようなコードを書いていた場合、アプリケーションが誤作動する可能性がある。
　・甲さんがログアウト直後に乙さんが同じWebブラウザからログインした場合、甲さんが使っていたセッションファイルに乙さんの情報が上書きされる。
　　➡　甲さんがセッションIDを控えていた場合、乙さんになりすますことができる。　➡　ただし、ログイン直後にsession_regenerate_id関数をコールしていれば安全。

　cだけを行った場合
　・スクリプト終了までに再度$_SESSIONにアクセスするようなコードを書いていた場合、アプリケーションが誤作動する可能性がある。
　・不要になったセッションファイルが削除されるまでの間、無駄にディスク領域を圧迫する。
　・a,bのように共用パソコンでのトラブルは防げるが、セッション固定攻撃は防げない。
　　しかし、そもそもセッション固定攻撃を成立させなければよいので、ログイン直後にsession_regenerate_id関数をコールしていれば安全。

　☆session_regenerate_id関数をコールしておけば、a,bだけを行えばcは不要。

　・逆にセッション破棄をする上でやってはいけないこと

　d．シンボルテーブルから$_SESSIONを削除する　
　　・スクリプト実行中にはスーパーグローバル変数のセッションに関わる機能をすべて使えなくしてしまう。
　　　ただし、セッションの情報が消失するわけではなく、次回のスクリプト実行時には復活する。　
　
　// Code
  unset($_SESSION);
  // end

　e．$_SESSIONという変数自体が配列以外になるように操作を加える
　　・dと似ているが厳密には異なる。
　　・これの後に通常の代入操作を行うとセッションの機能が復活するが、それまでにあった情報は失われる。

　// Code
  $_SESSION = null;
  $_SESSION['foo'] = 'bar';
   or
  $_SESSION = ['foo' => 'bar'];
　// end
　
　
・リクエストパラメータのパース規則

共通（$_GET,$_POST,$_COOKIE）
・1つの要素は　キー　=　値　という構造
・同じキーが複数回現れた場合、後に出現したものが優先
・キー　または　キー=　とした場合、値は空文字列であると見なされる
・キーに存在する　.　は　_　に置換される
・キーが空文字列であるものは無視される
・パーセントエンコーディングに関して、キーと値どちらに対しても可能な限りデコードされる
・+　はパーセントエンコーディングの　%20　と同様、半角スペースに置換される
・データ型は文字列と配列の2つのみ
・[]　をキーに添えることで配列が表現できるが、開き括弧と閉じ括弧の数が合わない場合は以下の処理が適用される
　1．外側を優先してペアとしてパースし、残った [ を伴う部分は通常の文字列として扱う
　2．無視される
　3．_　に置換される

$_GET　専用
・区切り文字には　&　が使われる
・パーセントエンコードされていない半角スペースと改行とNULLバイトの混入は一切認められない
・基本的にはパーセントエンコードが必須

// Code
raw_text = あ&
encoded_text = %E3%81%82&
raw_percent = %&
encoded_percent = %25&
raw_equals === &
encoded_equals = %3D%3D&
raw_array[] = value&
encoded_array%5B%5D = value&
assoc[key] = value

// デコード後（代入のイメージ）
$_GET = [
    'raw_text' => 'あ',
    'encoded_text' => 'あ',
    'raw_percent' => '%',
    'encoded_percent' => '%',
    'raw_equals' => '==',
    'encoded_equals' => '==',
    'raw_array' => [
        0 => 'value',
    ],
    'encoded_array' = [
        0 => 'value',
    ],
    'assoc' => [
        'key' => 'value',
    ],
];
// end

$_POST 専用
・区切り文字には　&　が使われる
・パーセントエンコードされていない半角スペースと改行とNULLバイトの混入は認められる
　ただし、
　1．キーに存在する半角スペースのみ　_　に置換される
　2．キーに存在するNULLバイトのみ終端文字として扱われる（手前で切り捨てられる）

// Code
// デコード前（改行は実際に入れる）
A = B &
C
= D
&E
 = F

// デコード後（代入のイメージ）
$_POST = [
    "A_" => " B ",
    "\nC\n" => " D\n",
    "E\n" => " F",
];
// end

$_COOKIE　専用
・区切り文字には ; が使われる
・パーセントエンコードされていない半角スペースの混入は認められる
　ただし、
　1．「Cookie: または ;」~「半角スペース以外の文字」の間の半角スペースは無視される
　2．「半角スペース以外の文字」~　=　の間の半角スペースは　_　に置換される
・パーセントエンコードされていない改行とNULLバイトの混入は一切認められない

// Code
// デコード前
Cookie: A = B ; C = D ; . = . ; E ; F

// デコード後（代入のイメージ）
$_COOKIE = [
    'A_' => ' B ',
    'C_' => ' D ',
    '＿' => ' . ',
    'E_' => '',
    'F' => '',
];

・使ってはいけないセッション関数

1．session_register関数
2．session_set_cookie_params関数
3．session_unset関数


・セッションの個人識別用パラメータ完全版
1．$_COOKIE
・session.use_cookiesが有効な場合のみ採用される。デフォルトでは有効
・ユーザー側にSet-Cookieヘッダーが自動的に送信されるようになる

2．$_GET
・session.use_only_cookiesが無効な場合のみ採用される。デフォルトでは有効
・以下の条件をすべて満たしたとき、HTML中に存在するURLに対してクエリが自動で付加される。
　1．session.use_trans_sidが有効
　2.出力バッファリングを行っていなければならない。　➡　ob_get_level関数の返り値が1以上でなければならない。
　　　　　　　　　　　　　　　　　　　　　　　　　　　　output_bufferingが無効な場合は最初にob_start関数をコールする必要がある。
　3.相対URLでなければならない。　➡　外部サイトに送信してしまうリスクがあるため、絶対URLには付加されない。
・手動で付加する場合には定数SIDを使用する。'PHPSESSID=xxxxx'のような値が自動的に設定されている。

// Code
// 絶対URLに手動で付加する例
<a href="http://example.com/test.php?<?=htmlspecialchars(SID, ENT_QUOTES, 'URF-8')?>">Test</a>
// end

3．$_POST
・session.use_only_cookiesが無効な場合のみ採用される。デフォルトでは有効
・送信はすべて手動で行う必要がある

4．$_SERVER['REQUEST_URI']
・http://example.com/PHPSESSID=xxxxx/test.php のように自由な形で埋め込むことを許可する
・session.use_only_cookiesが無効な場合のみ採用される。デフォルトでは有効
・送信はすべて手動で行う必要がある

5．$_SERVER['HTTP_REFERER']
・リファラーに対しても2と4に関するチェックが行われる
・session.use_only_cookiesが無効な場合のみ採用される。デフォルトでは有効
・session.referer_checkに含まれるべき自サイト特有の文字列を指定　➡　外部サイトのリファラーと区別できる
　デフォルトでは空文字列であり、このディレクティブは事実上無効だ。

