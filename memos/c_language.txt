

★　C　言語について

-------------------------------------------------------------

◎　ルール
　　1．C言語は大文字、小文字を区別する
　　2．文末は;
　　3．main関数が最初に動作する
　　4．コメント　/* */ 
　　5．改行は\n
　　6．使える数字は10進数、8進数、16進数
  　　　8進数　 ➡　先頭に　0　0152（10進数で106）
   　　 16進数　➡　先頭に　0x　0xFF（
　　7．変数宣言は関数の頭でしかできない
　　8．省略演算子（+=, -=, *=, /=, $=）、インクリメントデクリメント（++, --）は使える
　　9．型の種類（int　整数、double　実数、char　文字変数（1文字のみ）
　　10．if(条件式）文;
        ブロック文（複文）　{}
        }else if{}
        }else{}
　　11．等値演算子　==　!=
　　12．関係演算子　< > <= >=
　　13．論理演算子　&& || !
　　14．switch (条件式) {
          case 数値:
                実行分;
                break;
          case 数値:
                実行分;
                break;
          default:
                実行分;
                break;
         }
　　15．for文 for(初期化;条件式;更新）{}
  　　　　for(int i = 0; i <= 繰り返し回数; i++){}
　　16．while文
        初期化;
        while(条件式）{
          繰り返す文;
          更新;
        }
　　17．do{
          繰り返す文;
        }while(条件式);
　　18．プロトタイプ宣言
  　　　　関数の形を最初に宣言することで他のすべての関数からその関数を使えるようにすること。
      　　// プロトタイプ宣言
        　int sum(void);
         　void は引数を指定しないときに指定する。
         #include　もプロトタイプ宣言でstdio.hファイルの中の関数を使用していた。
　　　　　 // 仮引数宣言　➡　関数宣言に書かれた引数の型と名前のこと
      　　 int sum(int max);
           int sum(int);  でも可
          // 実引数　➡　関数に渡す数値のこと
           sum(50); // 呼び出し部
　　19．戻り値
   　　　関数の前の型宣言が戻り値の型を示している。
　　　　　関数の戻り値は変数に代入して使う。
　　20．ローカル変数
　　　　　実装例：関数内で宣言
     　　　int count;
  　　　　関数の中で宣言された変数。仮引数の変数も同様で関数が終わると捨てられ、再度関数が呼ばれた場合は新しく作られる。
　　　　　ローカル変数が有効なのは宣言された関数の中でのみである。
　　　　　グローバル変数よりもローカル変数が優先される。関数の独立性のため。
　　21．グローバル変数
　　　　　実装例：関数外で宣言
     　　　int count;
　　　　　関数外で宣言された変数。宣言されたソースファイル内のすべての関数から使用できる。
　　　　　自動的に0に初期化される。
　　22．スタティック変数（静的なローカル変数）
　　　　　実装例：関数内で宣言
　　　　　　static int count;
         ローカル変数とグローバル変数の特徴を併せ持つ。
　　　　　関数内で宣言する変数だが、プログラムが終了するまで残る変数で、初期化をしなくても自動的に0に初期化される。
　　　　　なお、初期化は最初に1回しかされない。
　　　　　関数が以前に呼び出された時の値を覚えておきたい場合に使用される。
　　　　　関数の呼び出し回数や検索を行う関数で以前に見つかった文字位置を記憶する場合などに利用できる。
　　23．配列
  　　　配列の宣言：　型名　配列名[要素数];
　　　　配列の初期化：　型名　配列名[要素数]　= {0番の数値, 1番の数値, ・・・};
　　　　配列の中身は配列の要素数よりも少ない場合、0が入る。
　　　　要素数を省略した場合は、要素の数だけ確保される。
　　　　配列の要素数を求めるのはsizeof演算子を使う。
　　　　// sizeof演算子の使い方
    　　sizeof(array) / sizeof(array[0])  配列の長さ（ビット）を配列の要素の長さ（ビット）で割ることで配列の要素数がわかる
      
     





-------------------------------------------------------------

★　関数

  ◎　#include <stdio.h>
      ・printf()
      ・scanf("入力変換指定子", &変数名);
      　　実装例：
        　#include <stdio.h>
  
          int main(void){
          	int data1, data2, sum;
          	printf("最大値と最小値をカンマ区切りで入力\n");
          	scanf("%d,%d", &data1, &data2);
          	sum = (data2 + data1) * (data2 - data1 + 1)/2;  
          	printf("%dと%dの合計は%dです。\n", data1, data2, sum);
          	return 0;
          }

　◎　#include <math.h>
      ・pow(x,y);
         xのy乗を表す。
         pow(2, n); ➡　2のn乗

　◎　#include <memory.h>
 　　　・memcpy(array1, array2, array_size); 
          array1　➡　コピー先配列名
          array2　➡　コピー元配列名
          array_size ➡　配列全体のサイズ
        　実装例：array1の全要素をarray2へコピー
         　memcpy(array2, array1, sizeof(array1));
　　　　　　バッファオーバーラン　➡　memcpy関数は配列の長さを考慮しない。コピー元の配列がコピー先より長くても無理やりコピーしてしまうため、
      　　　　　　　　　　　　　　　　はみ出たデータは別の変数や配列に上書きされてしまう。結果、重大なエラーとなる。

-------------------------------------------------------------

★　用語

・アセンブラ
　低級言語。コンピュータが理解できる言語でマシン語（機械語）のこと。
 
・コンパイル
　プログラミング言語を機械語に翻訳すること。翻訳する機能を持つものをコンパイラという。
　コンパイラの3段階の動作
　1．プリプロセッサというソフトが文字列の調整（空白や改行の結合、記号の置き換えなど）を行い、プログラムを解析しやすくする。
　2．コンパイラがコンパイルする。この時に最適化（より高速に動作するように工夫してマシン語に翻訳する機能）を行う。
　3．翻訳した機械語プログラムがリンカというソフトによって結合（リンク）され、マシン語のデータが実行可能ファイル（EXEファイル）になる。

・インタプリタ
　プログラムを読み込むと同時に翻訳する機能のこと。
 
・擬似命令
　プログラムコードではなく、機械語に翻訳されずその前段階で処理される。
　#includeはprintf関数などの準備をするための命令。

・エスケープシーケンス
　画面に表示できない制御を行うために使われる特殊文字。
　改行　➡　\n
　タブ　➡　\t

・数値と数字
　数値は数を表現するもので計算に使える。
　数字は見た目は同じだが、数を表現するものではなく、計算に使えない。

・文字列リテラル
　"”で囲われた文字定数。
 
・整数と実数
　整数は自然数に0と負の数を加えた数のこと。
　実数は整数に小数値を加えた数のこと。

・浮動小数点方式
　実数値を数値の並び（仮数部）と小数点の位置（指数部）で表す方法。

・出力変換指定子
　外部のデータを文字列に変換して表示したい時にその変換方法を指定する記号。
　 整数値を文字列に変換する　➡　%d　指定子
　　例：printf("%d+%d=%d\n", 100, 200, 300);
   桁数を指定する　➡　%桁数d
    例：printf("%5d", 500);  // 空白→  500
   空白を0にする　➡　%0桁数d
    例：printf("%5d", 500);  // 00500
   実数値の桁をそろえる　➡　%全体桁数.少数桁数f  全体桁数は少数の桁数と小数点を含む
    例：printf("%6.2f", 3.14159);  // 3.14
   実数値を数字に変換する　　➡　%f　指定子
　　例：printf("%f\n", 10.0 + 3.0);   // 13.00
       printf("%f\n", 10.0 - 3.0);   // 7.00
       printf("%f\n", 10.0 * 3.0);   // 30.000
       printf("%f\n", 10.0 / 3.0);   // 3.3333
   文字を入れる　➡　%c
    例：printf("%c\n", 'A');
   
   入力値の場合
   文字を入力する　➡　%c 指定子　char
   文字列　➡　%s 指定子　char
   10進数の整数　➡　%d 指定子　int, short
   浮動小数点数　➡　%f 指定子　float
   実数(倍精度浮動小数点数）　➡　%lf　指定子　double
       
・キャスト変換
　強制的に型を変換する機能。
　型の記載例：
  （変換する型）数値や変数名
　　(int)(1.05 * 360)); // 378
