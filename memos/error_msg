

エラーについて

-----------------------------------------------------------

◎エラーメッセージの大原則

1.動詞を含む短い文を探す
　・'i' undecleared (first use in this function)　➡　'i'が宣言されていません（この関数で最初に使用されます）
　・parse error before '}'　　　　　　　　　　　　　➡　'}'の前のパースエラー
　・undefined reference to 'printf'　　　　　　　　➡　'printf'への未定義の参照
　・unterminated string or character constant　　 ➡　終端されていない文字列、または文字定数
 などの短い文章がエラーメッセージの本質的な部分である。
 
2.ファイル名が書いてある時は、そのファイルに原因がある
　エラーメッセージにファイル名が出ているときは、まさにそのファイルに問題がある。また、行番号も同様である。
 
3.長いエラーメッセージは上から順番に読む
　大多数のコンパイラはソースコードを上から読む。
  つまり、ソースコードの上の方で見つかったエラーほど先に報告される。
  上の方のコードはそれより下の部分でよく利用されている可能性が高いため、エラーも上から順番に対処するべきである。
  
  
◎エラーの解決の大原則
 
1.何をすればエラーメッセージが出てくる、でなくなるのかを見極める
　まずはエラーがある個所はなんとなくわかるが、直し方の検討がつかない場合に該当の部分を取り除いてエラーが出るかどうかを確かめる。
 　
2.エラーが再現する小さなプログラムを作る
　エラーが起きる箇所だけを取り出して、そのエラーが出るようなできるだけ小さいプログラムを新しく作る。
　なぜそのエラーが出ているのかを考える。
　このような同じエラーが出るできるだけ小さなプログラムのことを最小再現コード（minimal repro）という。

3.プログラムの動作の流れを追いかける
　プログラムが実際にどのように動いているか、どのコードがどういう順番で実行されているのかを把握することで原因を特定しやすくなる。
　
　デバッグ
　・printfデバッグ
　　エラーの原因となっていそうな変数に対して、printfなどの画面に表示させる関数を使い、変数の値を処理の途中で表示させる。
  　どこかのタイミングで変数の値が意図しないものに変わったのであれば、そこが原因である。
　　どこに加えたprintfなのかがわかるように出力を工夫する。
  
　・デバッガを使う
　　言語によってはデバッガと呼ばれるプログラムの実行を途中で止めたり、変数の値をのぞいたりすることができるプログラムを使える。
　　C言語ならGDB、PythonならばPDB

4.仮説・予想・実験・考察のサイクルを回す
　愚直にデバッグしても原因は見つかるかもしれないが、なぜエラーが出るのかを考えながらデバッグしたほうが早く見つかる。
　1.エラーの原因の仮設を立てる
　2.もしその原因が正しかったと仮定して、きちんと動く、エラーになる場合を予想する
　3.その場合になるように実際に動かしてみて、予想通り成功、失敗するか確かめる
　4.予想と違う場合は改めて考えなおして、違う仮説を立てる

5.これらを組み合わせる
　原則2~4はお互いの効果を高め合う。
　・minimal reproを作ればコードが短くなり、デバッグがしやすく、考慮するべきモノゴトが少なくなるため、仮設を立てやすくなる
　・デバッグでプログラムの動作を把握すれば、仮設が立てやすくなり、エラーと関係のない部分がわかってminimal reproを作りやすくなる
　・的確な仮説を立てられるようになれば、minimal repro作りやデバッグが手探り状態でなくなる

6.エラーは1つずつ解決する
　・一気に複数のエラーを解決しようとは絶対にしないこと。
　　minimal repro が作れないし、考えることが多くなると頭がパンクし何もわからなくなる。
　・困難は分割せよ。
　　大量のエラーメッセージも実際は複数の小さな問題が同時に起こった結果である。細かく切り分けて一つ一つ対処する。
 
7.初めからやり直せるようにしておく
　実行する前のプログラムをディレクトリ毎保存しておけば、めちゃくちゃになっても最初からやり直すことができる。
 

◎Google検索の大原則 

1."動詞を含む短い文章"をそのままGoogle検索に入れる
　エラーの本質的な部分を検索することで的確な対処を見つけられる。

2.エラーコードで検索する
　error CS0246: The type or namespace name ~~
　このerror CS0246だけでの検索
 
3.ファイル名は検索キーワードに入れない
　
4.情報を絞り込むキーワードを追加する
　直面している状況のエラーが出なかった時と比べた特殊さを端的に表現するものをキーワードとして使う。
　例えば、ファイルを読み書きするプログラムを書いていて、名前が英数字のファイルは開けるのに日本語が入ると開けない場合は「ファイル名　日本語」などのキーワード。
 
5.英語で調べてみる
　日本語での対処ページよりも英語での対処ページの方が圧倒的に数が多い。
 
6.サンプルコードを見つけても、何も考えずにコピペしないこと
　それが何をしていて、なぜ動くのかを自分で考えて、自分のコードを書き直すこと。
 
 
 
 
 
 
 
 
 
 
 
 
 
 

