
サイバー攻撃について

------------------------------------------------------------------


◎　XSS（クロスサイトスクリプティング）

・概要
攻撃者はインターネット掲示板などの動的なWebサイトにある入力フォームにワナ（脆弱性のあるサイトへ誘導するスクリプトを含んだリンク）を設置する。
リンクをクリックしてこのようなサイトに誘導されると、ユーザーのブラウザ上で不正なスクリプトが実行され、
入力した情報やCookieなどが攻撃者へ漏えい、マルウェアへの感染、なりすましなどの被害が発生する。

・原因
入力値が制限されていなかったり、入力したスクリプトをそのまま実行できる状態にあり、攻撃者が容易に不正なスクリプトを入力できてしまうことがあげられる。

・種類
　1．Reflected XSS（反射型XSS）
　　　攻撃者は偽メールや偽サイトに不正なスクリプトを含んだリンクを用意し、脆弱性のあるWebサイトに誘導する（リクエストさせる）ことで
　　　ユーザーのブラウザで不正なスクリプトを実行させ、情報の搾取やマルウェアのダウンロードを行う。

　2．Stored/Persistent XSS（格納型/蓄積型/持続型XSS）
　　　攻撃者はあらかじめWebアプリケーションに直接スクリプトを格納する。
　　　該当のページをユーザーが閲覧するたびに、不正なスクリプトが実行される。
　　　該当ページにアクセスするだけであるため、Reflected XSSと比べると
　　　ワナを仕掛けたWebサイトを準備したり、スクリプトを含んだリンクをメール送信したりしなくても攻撃が成立する点では効率的である。
    　WebメールやSNSなどが典型的な攻撃ターゲット。
      メリット：罠サイトに利用者を誘導する手間がかからないこと
      　　　　　注意深い利用者でも被害にあう可能性が高いこと

　3．DOM Based XSS
　　　Webブラウザで動作するJavaScript上のコードの脆弱性を悪用した攻撃で、サーバー側で攻撃用スクリプトが実行されるのではなく、
　　　クライアントのWebブラウザ上で不正なスクリプトが実行される。
　　　また、DOM Based XSSは静的なHTMLにおいてもJavaScriptが利用されていれば攻撃対象となる。

・被害
　1．セッションハイジャック
　2．個人情報の流出
　3．Webページの改竄

・対策
　1．サニタイジング（エスケープ）処理をする
 　　・要素内容については「<」と「&」
   　・属性値についてはダブルクォートで囲い、「<」と「"」と「&」　をそれぞれエスケープする
　　  ブラウザで「<」という文字を表示させる場合は、文字参照により「&lt;」と記述（エスケープ）する必要がある。
     これを「<」のままHTMLを生成すると、ブラウザは「<」をタグの開始と解釈する。これを悪用したのがXSS攻撃。
　　　「<」や「””」といった区切りやタグなどの意味を持つ文字を意味を持たない文字列に置き換え無害化する行為である、
　　　サニタイジングを行うことでスクリプトが意図せずに挙動することを防ぐことができる。
   　　PHPではhtmlspecialchars関数で対策できる。
     　string htmlspecialchars(string $string, int $quote_style, string $charset)
       第1引数…変換対象の文字列　第2引数…引用符の変換方法　第3引数…文字エンコーディング
       
       引用符の変換
       変換前　　|　変換後　　|　ENT_NOQUOTES　|　ENT_COMPACT　|　ENT_QUOTES　|
       　 <         &lt;           〇　　　　　　　　〇　　　　　　    〇
        　>　　　　　&gt;           〇      　  　   〇               〇
          &         &amp;          〇              〇               〇
          "        &quot;          ×               〇               〇
          '        &#39;           ×               ×                〇
          
        ➡　要素内容　➡　$quote_styleはどれでもよい
        　　属性値　　➡　ダブルクォーテーションで囲み、$quote_styleはENT_COMPACT、もしくはENT_QUOTES

　2．バリデーション処理（入力値の制限）
　　　例えば、パスワード入力欄に「全角英数字の6文字」、電話番号入力欄に「数字のみ」などの制限を入れることで不正なスクリプトを入力させない。
　　　JavaScriptを使い、ブラウザ側で入力値の制限を行ってしまうと、ユーザー側がJavaScriptをオフにして不正なスクリプトを入力ができるため、必ずサーバー側で制限を実施する。
   
　3．WAFを設置する
　　　WAF（Web Application Firewall）はWebアプリケーションを対象とした攻撃を検知・防御するセキュリティ製品。
　　　自社においてオープンソースのシステムを利用していたり、CMSやフレームワークを使ってWebサイトを構築していたりする場合、
　　　全ての脆弱性修正に対応するのは限界があるため、WAFの導入は必要不可欠である。

　4．出力時はhttpやhttpsから始まるURLのみ許可する
　　　URLに「JavaScriptスキーム」や「dataスキーム」などが含まれている場合でも、クロスサイトスクリプティングのリスクが生じる。
　　　入力するリンク先のURLはhttpやhttpsから始まるもののみを許可する設定にすることで想定外の処理がされるリスクを防げる。
   
  5．クッキーにHttpOnly属性を付与する　
  　　この属性はJavaScriptからのクッキーの読み出しを禁止するというもの。
    　セッションIDの盗み出しには効果があるが、その他の攻撃には有効ではない。
      これはphp.iniに「session.cookie_httponly = On　」と追加することでできる。

　6．TRACEメソッドの無効化
 　　　クロスサイトトレージング（XST）という攻撃の対策。
    　　XST…JavaScriptによりHTTPのTRACEメソッドを送信することでクッキー値やBasic認証のパスワードを盗む方法。
      　XSS攻撃を完全に解消できれば、問題はない。
        最近のブラウザではXST対策がなされている。
        TRACEメソッドの無効化はhttpd.confに「TraceEnable　Off」と追加する。
        
  7．URLを生成する際の対策
  　　URLをプログラムで作成する場合はhttpスキームとhttpsスキームのみを許可するようにチェックする必要がある。
    　具体的にはURLとしては以下のいずれかのみを許容するようにチェックする。
     　・http:　または　https:　で始まる絶対URL
       ・スラッシュ「/」で始まる相対URL
       チェックする関数
       function check_url($url){
            if(preg_match('/\Ahttp:/', $url) ||
               preg_match('/\Ahttps:/', $url) ||
               preg_match('#\A/#', $url)) {
                return true;
            }else{
                return false;
            }
        }
        
  8．リンク先ドメインのチェック
  　　リンク先として任意のドメインのURLを指定できる場合、利用者が気付かない内に罠のサイトに誘導され、
    　フィッシングの手法で個人情報等を入力させられる可能性がある。
     　対策
       ・リンク先を検証してURLが外部ドメインである場合はエラーにする
       ・外部ドメインへのリンクであることを利用者に注意喚起するためのクッションページを表示する
       
  9．イベントハンドラのXSSはJSをエスケープする必要がある
  　　JSを動的生成するケースでは入力パラメータ中のシングルクォート「'」がデータとしての文字「'」ではなく、
    　JSの文字列の終端に使われてしまうことが原因で脆弱性が発生する。
       対策
     　・データをJavaScript文字列リテラルとしてエスケープする
       ・この結果をHTMLエスケープする
       
       JavaScriptの文字列リテラルとしてエスケープすべき文字
       　文字　　　|　エスケープ後
        　\           \\
          '           \'
          "           \"
         改行         \n
         
         そのため入力に「<>'"\」が与えられた場合は以下の様にエスケープする必要がある。
         　元入力　<>'"\　➡　JavaScriptエスケープ後　<>\'\"\\　➡　HTMLエスケープ後　&lt;&gt;\&#39;\&quot;\\

　10．script要素のXSS
 　　　入力中に「</script>」が含まれている場合、そこでJavaScriptのソースの終端となり、
    　　再度「<script>alert(document.cookie)//」などと入れることでXSS攻撃が可能である。
      
  11．JavaScriptの動的パラメータ生成時の対策
  　　1．Unicodeエスケープによる対策
    　　英数字以外をすべてエスケープする手法で、UnicodeコードポイントU+XXXXの文字を\uXXXXという形でエスケープする機能を利用する。
      　Unicodeエスケープする関数escape_js_stringは文字エンコーディングがUTF-8であることが前提だが、
        英数字に加えてマイナス記号「-」とピリオド「.」をエスケープしない仕様になっている。
        実装例：
        <?php 
         // 文字列を全て\uXXXX形式に変換する
         function unicode_escape($matches){
            $u16 = mb_convert_encoding($matches[0], 'UTF-16');
            return preg_replace('/[0-9a-f]{4}/', '\u$0', bin2hex($u16));
         }
         // 英数字とマイナス、ピリオド以外を\uXXXX形式でエスケープする
         function escape_js_string($s){
            return preg_replace_callback('/[^-\.0-9a-zA-Z]+/u', 'unicode_escape', $s);
         }
         ?>
         
         スクリプトの説明
         ・unicode_escape関数は入力文字列をすべて\uXXXXというUNICODE形式でエスケープする
         ・mb_convert_encodingで入力をUTF-16でエンコーディングする
         ・bin2hexで16進数文字列に変換する
         ・正規表現により4バイト毎に「\u」を挿入する
         ・escape_js_string関数は入力文字列の中から、英数字以外を\uXXXX形式でエスケープする
         ・preg_replace_callback関数により英数字以外からなる文字列をunicode_escape関数に引き渡す
         
      2．script要素の外部でパラメータを定義して、JavaScriptから参照する方法
      　　hiddenパラメータを利用する。
        　実装例：
          <input type="hidden" id="familyname" value="<?php echo htmlspecialchars($familyname, ENT_COMPACT, 'UTF-8'); ?>">
          ...
          <script type="text/javascript">
          var familyname = document.getElementById('familyname').value;
          //..
          
          2行目で値を設定する際に属性値に対するエスケープ原則に従い、htmlspecialchars関数でエスケープした値をダブルクォートで囲んでいる。
          そのinputの値をgetElementByIdメソッドにより参照している。

◎　CSRF（クロスサイトリクエストフォージュリ）

・概要


・原因

・対策


◎　SQLインジェクション

・概要

・原因

・対策

セッションフィクセーション
ディレクトリトラバーサル
OSコマンドインジェクション
DNSリバインディング
オープンリダイレクタ



◎　ヌルバイト攻撃

・概要
　ブラウザ上でJavaScriptが実行されて、XSS攻撃をされる。
 　例えば、入力値をチェックするフォームでヌルバイトが正しく処理されない場合、
  　正常値%00<script>悪い処理</script>
   と入れられたら、%00まではチェックして正常値を返し、その後ろがチェックされずに実行されてしまうということが発生する。

・原因
　バイナリセーフな関数を使用していない。
　バイナリセーフ…入力値がどんなバイト列であっても正しく扱えること。特にヌルバイトが現れても正しく処理できる
　ヌルバイト…値ゼロのバイト（PHPでは\0と表記）。特別なのはC言語などではヌルバイトを文字列の終端とみなす取り決めがあるため。
 
・対策




