
サイバー攻撃について

------------------------------------------------------------------


◎　XSS（クロスサイトスクリプティング）

・概要
攻撃者はインターネット掲示板などの動的なWebサイトにある入力フォームにワナ（脆弱性のあるサイトへ誘導するスクリプトを含んだリンク）を設置する。
リンクをクリックしてこのようなサイトに誘導されると、ユーザーのブラウザ上で不正なスクリプトが実行され、
入力した情報やCookieなどが攻撃者へ漏えい、マルウェアへの感染、なりすましなどの被害が発生する。

・原因
入力値が制限されていなかったり、入力したスクリプトをそのまま実行できる状態にあり、攻撃者が容易に不正なスクリプトを入力できてしまうことがあげられる。

・種類
　1．Reflected XSS（反射型XSS）
　　　攻撃者は偽メールや偽サイトに不正なスクリプトを含んだリンクを用意し、脆弱性のあるWebサイトに誘導する（リクエストさせる）ことで
　　　ユーザーのブラウザで不正なスクリプトを実行させ、情報の搾取やマルウェアのダウンロードを行う。

　2．Stored/Persistent XSS（格納型/蓄積型/持続型XSS）
　　　攻撃者はあらかじめWebアプリケーションに直接スクリプトを格納する。
　　　該当のページをユーザーが閲覧するたびに、不正なスクリプトが実行される。
　　　該当ページにアクセスするだけであるため、Reflected XSSと比べると
　　　ワナを仕掛けたWebサイトを準備したり、スクリプトを含んだリンクをメール送信したりしなくても攻撃が成立する点では効率的である。

　3．DOM Based XSS
　　　Webブラウザで動作するJavaScript上のコードの脆弱性を悪用した攻撃で、サーバー側で攻撃用スクリプトが実行されるのではなく、
　　　クライアントのWebブラウザ上で不正なスクリプトが実行される。
　　　また、DOM Based XSSは静的なHTMLにおいてもJavaScriptが利用されていれば攻撃対象となる。

・被害
　1．セッションハイジャック
　2．個人情報の流出
　3．Webページの改竄

・対策
　1．サニタイジング（エスケープ）処理をする
　　　<や””といった区切りやタグなどの意味を持つ文字を意味を持たない文字列に置き換え無害化する行為。
　　　サニタイジングを行うことでスクリプトが意図せずに挙動することを防ぐことができる。

　2．バリデーション処理（入力値の制限）
　　　例えば、パスワード入力欄に「全角英数字の6文字」、電話番号入力欄に「数字のみ」などの制限を入れることで不正なスクリプトを入力させない。
　　　JavaScriptを使い、ブラウザ側で入力値の制限を行ってしまうと、ユーザー側がJavaScriptをオフにして不正なスクリプトを入力ができるため、必ずサーバー側で制限を実施する。

　3．WAFを設置する
　　　WAF（Web Application Firewall）はWebアプリケーションを対象とした攻撃を検知・防御するセキュリティ製品。
　　　自社においてオープンソースのシステムを利用していたり、CMSやフレームワークを使ってWebサイトを構築していたりする場合、
　　　全ての脆弱性修正に対応するのは限界があるため、WAFの導入は必要不可欠である。

　4．出力時はhttpやhttpsから始まるURLのみ許可する
　　　URLに「JavaScriptスキーム」や「dataスキーム」などが含まれている場合でも、クロスサイトスクリプティングのリスクが生じる。
　　　入力するリンク先のURLはhttpやhttpsから始まるもののみを許可する設定にすることで想定外の処理がされるリスクを防げる。


◎　CSRF（クロスサイトリクエストフォージュリ）

・概要


・原因

・対策


◎　SQLインジェクション

・概要

・原因

・対策

セッションフィクセーション
ディレクトリトラバーサル
OSコマンドインジェクション
DNSリバインディング
オープンリダイレクタ



◎　ヌルバイト攻撃

・概要
　ブラウザ上でJavaScriptが実行されて、XSS攻撃をされる。
 　例えば、入力値をチェックするフォームでヌルバイトが正しく処理されない場合、
  　正常値%00<script>悪い処理</script>
   と入れられたら、%00まではチェックして正常値を返し、その後ろがチェックされずに実行されてしまうということが発生する。

・原因
　バイナリセーフな関数を使用していない。
　バイナリセーフ…入力値がどんなバイト列であっても正しく扱えること。特にヌルバイトが現れても正しく処理できる
　ヌルバイト…値ゼロのバイト（PHPでは\0と表記）。特別なのはC言語などではヌルバイトを文字列の終端とみなす取り決めがあるため。
 
・対策




